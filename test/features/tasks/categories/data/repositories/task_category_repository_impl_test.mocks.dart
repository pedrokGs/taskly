// Mocks generated by Mockito 5.4.6 from annotations
// in taskly/test/features/tasks/categories/data/repositories/task_category_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:taskly/features/tasks/data/datasource/task_category_remote_datasource.dart'
    as _i3;
import 'package:taskly/features/tasks/data/models/task_category_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskCategoryModel_0 extends _i1.SmartFake
    implements _i2.TaskCategoryModel {
  _FakeTaskCategoryModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TaskCategoryRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskCategoryRemoteDataSource extends _i1.Mock
    implements _i3.TaskCategoryRemoteDataSource {
  @override
  _i4.Future<List<_i2.TaskCategoryModel>> getTaskCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getTaskCategories, []),
            returnValue: _i4.Future<List<_i2.TaskCategoryModel>>.value(
              <_i2.TaskCategoryModel>[],
            ),
            returnValueForMissingStub:
                _i4.Future<List<_i2.TaskCategoryModel>>.value(
                  <_i2.TaskCategoryModel>[],
                ),
          )
          as _i4.Future<List<_i2.TaskCategoryModel>>);

  @override
  _i4.Future<_i2.TaskCategoryModel?> findTaskCategoryById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#findTaskCategoryById, [id]),
            returnValue: _i4.Future<_i2.TaskCategoryModel?>.value(),
            returnValueForMissingStub:
                _i4.Future<_i2.TaskCategoryModel?>.value(),
          )
          as _i4.Future<_i2.TaskCategoryModel?>);

  @override
  _i4.Future<_i2.TaskCategoryModel> createTaskCategory(
    _i2.TaskCategoryModel? taskCategory,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createTaskCategory, [taskCategory]),
            returnValue: _i4.Future<_i2.TaskCategoryModel>.value(
              _FakeTaskCategoryModel_0(
                this,
                Invocation.method(#createTaskCategory, [taskCategory]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.TaskCategoryModel>.value(
              _FakeTaskCategoryModel_0(
                this,
                Invocation.method(#createTaskCategory, [taskCategory]),
              ),
            ),
          )
          as _i4.Future<_i2.TaskCategoryModel>);

  @override
  _i4.Future<_i2.TaskCategoryModel> updateTaskCategory(
    _i2.TaskCategoryModel? taskCategory,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateTaskCategory, [taskCategory]),
            returnValue: _i4.Future<_i2.TaskCategoryModel>.value(
              _FakeTaskCategoryModel_0(
                this,
                Invocation.method(#updateTaskCategory, [taskCategory]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.TaskCategoryModel>.value(
              _FakeTaskCategoryModel_0(
                this,
                Invocation.method(#updateTaskCategory, [taskCategory]),
              ),
            ),
          )
          as _i4.Future<_i2.TaskCategoryModel>);

  @override
  _i4.Future<void> deleteTaskCategory(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteTaskCategory, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
